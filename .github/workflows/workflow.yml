name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Create temp config reader
        run: |
          echo '{"type": "module"}' > temp-package.json
          echo "import fs from 'fs';
          
          const data = JSON.parse(fs.readFileSync('./src/data.json', 'utf8'));
          const metaTags = JSON.parse(fs.readFileSync('./src/metatags.json', 'utf8'));
          
          const { institutionId } = data;
          
          function splitInstitutionId() {
              const parts = institutionId.split(/(\d+)/).filter(Boolean);
              return {
                  institution: parts[0],
                  id: parts[1]
              };
          }
          
          const result = splitInstitutionId();
          const institutionName = result.institution;
          
          const branch = process.env.GITHUB_REF.split('/').pop();
          const stage = branch.startsWith('beta-') ? 'DEV' : 'PROD';
          
          const deployment = {
              [`beta-${institutionName}`]: {
                  s3Bucket: `beta.${institutionName}.com`,
                  cloudfrontId: data.cloudFrontId
              },
              [institutionName]: {
                  s3Bucket: `${institutionName}.com`,
                  cloudfrontId: data.cloudFrontId
              }
          };
          
          const config = deployment[branch];
          if (config) {
              console.log(JSON.stringify({
                  s3Bucket: config.s3Bucket,
                  cloudfrontId: config.cloudfrontId,
                  shouldDeploy: true,
                  reactAppStage: stage
              }));
          } else {
              console.log(JSON.stringify({
                  s3Bucket: '',
                  cloudfrontId: '',
                  shouldDeploy: false,
                  reactAppStage: ''
              }));
          }" > configReader.mjs

      - name: Get deployment configuration
        id: config
        run: |
          cp package.json original-package.json
          cp temp-package.json package.json
          CONFIG_JSON=$(node configReader.mjs)
          cp original-package.json package.json
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT

      - name: Log Deployment Details
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Deploying to S3 Bucket: ${{ steps.config.outputs.s3_bucket }}"
          echo "CloudFront Distribution ID: ${{ steps.config.outputs.cloudfront_id }}"
          echo "Branch name: ${GITHUB_REF#refs/heads/}"
          echo "React App Stage: ${{ steps.config.outputs.react_app_stage }}"

      - name: Setup Environment Files
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          # Ensure both .env and .env.production exist
          touch .env
          touch .env.production
          
          # Create a merged environment file
          cat .env > .env.merged
          cat .env.production >> .env.merged
          
          # Set REACT_APP_STAGE
          echo "REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}" >> .env.merged
          
          # Override .env with merged content
          mv .env.merged .env
          
          echo "Environment files merged. Current environment variables:"
          cat .env
          
          # Also update .env.production with the stage
          if [ "${{ steps.config.outputs.react_app_stage }}" = "PROD" ]; then
            echo "REACT_APP_STAGE=PROD" >> .env.production
          fi

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        env:
          CI: false
          GENERATE_SOURCEMAP: false
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          echo "Building React app with merged environment variables..."
          yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"