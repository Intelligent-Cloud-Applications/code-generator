name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Setup Environment Files
        run: |
          # Create a temporary file for merged environment variables
          cp .env .env.temp || touch .env.temp
          
          # If .env.production exists, append its contents
          if [ -f .env.production ]; then
            while IFS= read -r line || [ -n "$line" ]; do
              if [[ $line =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
                # Extract variable name
                var_name="${line%%=*}"
                # Remove existing definition if any
                sed -i "/^${var_name}=/d" .env.temp
              fi
              # Append the line
              echo "$line" >> .env.temp
            done < .env.production
          fi
          
          # Replace original .env with merged content
          mv .env.temp .env
          
          # Display non-sensitive env vars for debugging
          echo "Environment variables (excluding sensitive data):"
          grep -v "SECRET\|KEY\|PASSWORD" .env || true

      - name: Create temp config reader
        run: |
          echo '{"type": "module"}' > temp-package.json
          echo 'import fs from "fs";
          
          try {
            const envContent = fs.readFileSync(".env", "utf8");
            
            // Function to extract value for a key from .env content
            const getEnvValue = (content, key) => {
              const regex = new RegExp(`${key}=(.+?)(?=\\n[A-Z]|$)`, "s");
              const match = content.match(regex);
              return match ? match[1].trim() : null;
            };
            
            // Get and parse institution data
            const institutionDataRaw = getEnvValue(envContent, "REACT_APP_INSTITUTION_DATA");
            if (!institutionDataRaw) {
              throw new Error("Could not find REACT_APP_INSTITUTION_DATA in .env");
            }
            
            const data = JSON.parse(institutionDataRaw);
            const { institutionId } = data;
            
            if (!institutionId) {
              throw new Error("institutionId is missing from REACT_APP_INSTITUTION_DATA");
            }
            
            const parts = institutionId.split(/(\d+)/).filter(Boolean);
            const institutionName = parts[0];
            
            const branch = process.env.GITHUB_REF.split("/").pop();
            const stage = branch.startsWith("beta-") ? "DEV" : "PROD";
            
            const deployment = {
              [`beta-${institutionName}`]: {
                s3Bucket: `beta.${institutionName}.com`,
                cloudfrontId: data.cloudFrontId
              },
              [institutionName]: {
                s3Bucket: `${institutionName}.com`,
                cloudfrontId: data.cloudFrontId
              }
            };
            
            const config = deployment[branch];
            console.log(JSON.stringify({
              s3Bucket: config ? config.s3Bucket : "",
              cloudfrontId: config ? config.cloudfrontId : "",
              shouldDeploy: !!config,
              reactAppStage: stage
            }));
          } catch (error) {
            console.error("Error in config reader:", error.message);
            process.exit(1);
          }' > configReader.mjs

      - name: Get deployment configuration
        id: config
        run: |
          cp package.json original-package.json
          cp temp-package.json package.json
          CONFIG_JSON=$(node configReader.mjs)
          cp original-package.json package.json
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        env:
          CI: false
          GENERATE_SOURCEMAP: false
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"