name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Create temp config reader
        run: |
          echo '{"type": "module"}' > temp-package.json
          echo 'import fs from "fs";
          
          try {
            // Read both environment files
            const envContent = fs.readFileSync(".env", "utf8");
            const prodEnvContent = fs.readFileSync(".env.production", "utf8");
            
            // Function to extract JSON value from environment content
            const extractEnvJson = (content, varName) => {
              const regex = new RegExp(`${varName}\\s*=\\s*({[\\s\\S]*?})(?:\\s*(?=\\w+\\s*=|$))`, "m");
              const match = content.match(regex);
              if (!match) return null;
              try {
                return JSON.parse(match[1]);
              } catch (e) {
                console.error(`Error parsing ${varName}:`, e);
                return null;
              }
            };
            
            // Try to get institution data from both files
            let institutionData = extractEnvJson(prodEnvContent, "REACT_APP_INSTITUTION_DATA") || 
                                extractEnvJson(envContent, "REACT_APP_INSTITUTION_DATA");
            
            if (!institutionData) {
              throw new Error("Could not find or parse REACT_APP_INSTITUTION_DATA in environment files");
            }
            
            const { institutionId } = institutionData;
            if (!institutionId) {
              throw new Error("institutionId is missing from REACT_APP_INSTITUTION_DATA");
            }
            
            function splitInstitutionId() {
              const parts = institutionId.split(/(\d+)/).filter(Boolean);
              return {
                institution: parts[0] || "",
                id: parts[1] || ""
              };
            }
            
            const result = splitInstitutionId();
            const institutionName = result.institution;
            
            const branch = process.env.GITHUB_REF.split("/").pop();
            const stage = branch.startsWith("beta-") ? "DEV" : "PROD";
            
            const deployment = {
              [`beta-${institutionName}`]: {
                s3Bucket: `beta.${institutionName}.com`,
                cloudfrontId: institutionData.cloudFrontId
              },
              [institutionName]: {
                s3Bucket: `${institutionName}.com`,
                cloudfrontId: institutionData.cloudFrontId
              }
            };
            
            const config = deployment[branch];
            if (config) {
              console.log(JSON.stringify({
                s3Bucket: config.s3Bucket,
                cloudfrontId: config.cloudfrontId,
                shouldDeploy: true,
                reactAppStage: stage,
                institutionData: JSON.stringify(institutionData)
              }));
            } else {
              console.log(JSON.stringify({
                s3Bucket: "",
                cloudfrontId: "",
                shouldDeploy: false,
                reactAppStage: "",
                institutionData: ""
              }));
            }
          } catch (error) {
            console.error("Error in config reader:", error.message);
            process.exit(1);
          }' > configReader.mjs

      - name: Get deployment configuration
        id: config
        run: |
          cp package.json original-package.json
          cp temp-package.json package.json
          CONFIG_JSON=$(node configReader.mjs)
          cp original-package.json package.json
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT
          echo "institution_data=$(echo $CONFIG_JSON | jq -r .institutionData)" >> $GITHUB_OUTPUT

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          REACT_APP_STAGE: ${{ steps.config.outputs.react_app_stage }}
          REACT_APP_INSTITUTION_DATA: ${{ steps.config.outputs.institution_data }}
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          echo "Building React app with environment variables..."
          echo "REACT_APP_INSTITUTION_DATA=$REACT_APP_INSTITUTION_DATA"
          yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"