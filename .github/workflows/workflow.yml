name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Setup Environment Files
        run: |
          # Create .env file with proper formatting
          echo "REACT_APP_INSTITUTION_DATA={\"institutionId\":\"happyprancer\",\"s3BucketName\":\"beta.happyprancer.com\",\"cloudFrontId\":\"E263LXOGXF3H0N\",\"domain\":\"https://beta.happyprancer.com\"}" > .env
          echo "REACT_APP_META_TAGS={\"title\":\"Welcome to Happyprancer: Dance Your Way to Fun and Fitness!\",\"description\":\"Discover fun fitness at Happyprancer! Join our Zumba, Bollywood, and yoga classes online. Sign up today and let's dance, sweat, and celebrate your health!\",\"keywords\":[\"happyprancer\",\"dance fitness online\",\"zumba classes\",\"bollywood dance fitness\",\"virtual yoga sessions\"],\"gtmId\":\"GTM-5DW548R\"}" >> .env
          echo "GENERATE_SOURCEMAP=false" >> .env
          echo "REACT_APP_STAGE=PROD" >> .env
          
          # Display .env content for debugging
          echo "Current .env content:"
          cat .env

      - name: Create temp config reader
        run: |
          echo '{"type": "module"}' > temp-package.json
          echo 'import fs from "fs";

          try {
            const envContent = fs.readFileSync(".env", "utf8");
            
            // Extract institution data using regex
            const institutionMatch = envContent.match(/REACT_APP_INSTITUTION_DATA=({.*?})/);
            if (!institutionMatch) {
              throw new Error("Could not find REACT_APP_INSTITUTION_DATA in .env file");
            }
            
            const data = JSON.parse(institutionMatch[1]);
            const { institutionId } = data;
            
            if (!institutionId) {
              throw new Error("Invalid or missing institutionId in data");
            }
            
            const parts = institutionId.split(/(\d+)/).filter(Boolean);
            const institutionName = parts[0];
            
            const branch = process.env.GITHUB_REF.split("/").pop();
            const stage = branch.startsWith("beta-") ? "DEV" : "PROD";
            
            const deployment = {
              [`beta-${institutionName}`]: {
                s3Bucket: `beta.${institutionName}.com`,
                cloudfrontId: data.cloudFrontId
              },
              [institutionName]: {
                s3Bucket: `${institutionName}.com`,
                cloudfrontId: data.cloudFrontId
              }
            };
            
            const config = deployment[branch];
            if (!config) {
              console.log(JSON.stringify({
                s3Bucket: "",
                cloudfrontId: "",
                shouldDeploy: false,
                reactAppStage: ""
              }));
              process.exit(0);
            }
            
            console.log(JSON.stringify({
              s3Bucket: config.s3Bucket,
              cloudfrontId: config.cloudfrontId,
              shouldDeploy: true,
              reactAppStage: stage
            }));
          } catch (error) {
            console.error("Error in config reader:", error.message);
            process.exit(1);
          }' > configReader.mjs

      - name: Get deployment configuration
        id: config
        run: |
          cp package.json original-package.json
          cp temp-package.json package.json
          CONFIG_JSON=$(node configReader.mjs)
          cp original-package.json package.json
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT

      - name: Log Deployment Details
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Deploying to S3 Bucket: ${{ steps.config.outputs.s3_bucket }}"
          echo "CloudFront Distribution ID: ${{ steps.config.outputs.cloudfront_id }}"
          echo "Branch name: ${GITHUB_REF#refs/heads/}"
          echo "React App Stage: ${{ steps.config.outputs.react_app_stage }}"

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        env:
          CI: false
          GENERATE_SOURCEMAP: false
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          echo "Building React app with environment variables..."
          yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"