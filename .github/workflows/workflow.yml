name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Create temp config reader
        run: |
          echo "try {
            const data = {
              institutionId: 'happyprancer1234',
              s3BucketName: 'beta.happyprancer.com',
              cloudFrontId: 'E263LXOGXF3H0N',
              domain: 'https://beta.happyprancer.com'
            };
            
            const branch = process.env.GITHUB_REF.split('/').pop();
            const stage = branch.startsWith('beta-') ? 'DEV' : 'PROD';
            
            const deploymentConfig = {
              'beta-happyprancer': {
                s3Bucket: 'beta.happyprancer.com',
                cloudfrontId: 'E263LXOGXF3H0N'
              },
              'happyprancer': {
                s3Bucket: 'happyprancer.com',
                cloudfrontId: 'E263LXOGXF3H0N'
              }
            };
            
            const config = deploymentConfig[branch];
            console.log(JSON.stringify({
              s3Bucket: config ? config.s3Bucket : '',
              cloudfrontId: config ? config.cloudfrontId : '',
              shouldDeploy: !!config,
              reactAppStage: stage
            }));
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          }" > configReader.js

      - name: Get deployment configuration
        id: config
        run: |
          CONFIG_JSON=$(node configReader.js)
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT

      - name: Log Deployment Details
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Deploying to S3 Bucket: ${{ steps.config.outputs.s3_bucket }}"
          echo "CloudFront Distribution ID: ${{ steps.config.outputs.cloudfront_id }}"
          echo "Branch name: ${GITHUB_REF#refs/heads/}"
          echo "React App Stage: ${{ steps.config.outputs.react_app_stage }}"

      - name: Update .env file
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          if [ -f .env ]; then
            if grep -q "^REACT_APP_STAGE=" .env; then
              sed -i "s/^REACT_APP_STAGE=.*/REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}/" .env
            else
              echo "REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}" >> .env
            fi
          else
            echo "REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}" > .env
          fi
          echo "Updated .env file with REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}"

      # Setup symbolic link for data.json
      - name: Setup data.json symbolic link
        run: |
          mkdir -p node_modules
          ln -sf "$PWD/data.json" "$PWD/node_modules/data.json"
          echo "Created symbolic link for data.json in node_modules"
          
      # Verify the link and file
      - name: Verify data.json setup
        run: |
          ls -la node_modules/data.json
          cat node_modules/data.json
          echo "Verified data.json symbolic link and content"

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          CI: false
          GENERATE_SOURCEMAP: false
        run: yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"