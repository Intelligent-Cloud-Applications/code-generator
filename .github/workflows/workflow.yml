name: Dynamic Institution Deploy to S3

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn

      - name: Create temp config reader
        run: |
          echo '{"type": "module"}' > temp-package.json
          echo "import institutionData from '${{ github.workspace }}/src/constants.js';
          const branch = process.env.GITHUB_REF.split('/').pop();
          const stage = branch.startsWith('beta-') ? 'DEV' : 'PROD';
          const config = institutionData.deployment[branch];
          if (config) {
            console.log(JSON.stringify({
              s3Bucket: config.s3Bucket,
              cloudfrontId: config.cloudfrontId,
              shouldDeploy: true,
              reactAppStage: stage
            }));
          } else {
            console.log(JSON.stringify({
              s3Bucket: '',
              cloudfrontId: '',
              shouldDeploy: false,
              reactAppStage: ''
            }));
          }" > configReader.mjs

      - name: Get deployment configuration
        id: config
        run: |
          cp package.json original-package.json
          cp temp-package.json package.json
          CONFIG_JSON=$(node configReader.mjs)
          cp original-package.json package.json
          echo "s3_bucket=$(echo $CONFIG_JSON | jq -r .s3Bucket)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(echo $CONFIG_JSON | jq -r .cloudfrontId)" >> $GITHUB_OUTPUT
          echo "should_deploy=$(echo $CONFIG_JSON | jq -r .shouldDeploy)" >> $GITHUB_OUTPUT
          echo "react_app_stage=$(echo $CONFIG_JSON | jq -r .reactAppStage)" >> $GITHUB_OUTPUT

      - name: Log Deployment Details
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Deploying to S3 Bucket: ${{ steps.config.outputs.s3_bucket }}"
          echo "CloudFront Distribution ID: ${{ steps.config.outputs.cloudfront_id }}"
          echo "Branch name: ${GITHUB_REF#refs/heads/}"
          echo "React App Stage: ${{ steps.config.outputs.react_app_stage }}"

      - name: Update .env file
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          if [ -f .env ]; then
            # If .env exists, replace or add REACT_APP_STAGE
            if grep -q "^REACT_APP_STAGE=" .env; then
              # Replace existing REACT_APP_STAGE line
              sed -i "s/^REACT_APP_STAGE=.*/REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}/" .env
            else
              # Add REACT_APP_STAGE if it doesn't exist
              echo "REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}" >> .env
            fi
          else
            # Create new .env file if it doesn't exist
            echo "REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }}" > .env
          fi
          echo "Updated .env file with REACT_APP_STAGE=${{ steps.config.outputs.react_app_stage }} while preserving other variables"

      - name: Build the React app
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          echo "Building React app with REACT_APP_STAGE from .env"
          yarn react-scripts build || yarn build:prod || yarn build:production || yarn build

      - name: Set up AWS CLI
        if: steps.config.outputs.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIA5NNTYGDW2XCPH5GL
          aws-secret-access-key: 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
          aws-region: us-east-1

      - name: Deploy to S3
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Starting S3 sync to bucket: ${{ steps.config.outputs.s3_bucket }}"
          aws s3 sync ./build s3://${{ steps.config.outputs.s3_bucket }} --delete
          echo "S3 sync completed"

      - name: Cloudfront Invalidation
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ steps.config.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation --distribution-id ${{ steps.config.outputs.cloudfront_id }} --paths "/*"
          echo "CloudFront invalidation created"